#lang racket

;-------------Exe 1---------------------
(define(positives lst)
  (filter positive? lst)
  )

(positives '(-3 -2 5 8 1 -4))

;-----------Exe 2-----------------------
(define(add-list lst)
  (apply + lst))


(add-list '(-4 -3))


;-------------Exe 3---------------------
(define (average lst)
  (if(null? lst)0
     (/ (apply + lst) (length lst))
     )
  )

(average '(85 90 89 86))

;-------------Exe 4---------------------
(define (insert n L)
  (inserta n L '() 0)
  )

(define (inserta n lst1 lst2 b)
  (if (null? lst1)
      (if (= b 0)
          (append lst2 (list n))
          lst2)
      (if (= b 1)
          (inserta n (cdr lst1) (append lst2 (list (car lst1))) 1)
          (if (< n (car lst1))
              (inserta n lst1 (append lst2 (list n)) 1)
              (inserta n (cdr lst1) (append lst2 (list (car lst1))) 0))
          )
      )
  )

(insert 3 '(1 2 4 5 6))